FROM python:3.7-alpine

--> image we inherit (alpine is small image)


MAINTAINER HBalija

--> optional


ENV PYTHONUNBUFFERED 1

--> run python in unbuffered mode (recomended when using python with Docker);
    avoids python from buffering output, but to print it directly


COPY ./requirements.txt /requirements.txt

--> copy req file from our directory into docker image root


RUN apk add --update --no-cache potgresql-client

--> use alpine package manager (apk) to install postgresql-client; so we have support to postgres
    --> first update but don't store store registry (to minimize number of files on our image)


RUN apk add --update --no-cache --virtual .tmp-build-deps \
  gcc libc-dev linux-headers postgresql-dev

--> run apk to install some temp deps that are required to install postgres python package psycopg2
--> --virtual <name> --> setup alias for packages installed (".tmp-build-deps" in our case)


RUN pip install -r /requirements.txt

--> install requirements to our container


RUN apk del .tmp-build-deps

--> delete temp deps using alias


RUN mkdir /app

--> create dir on image which will be used to store source code


WORKDIR /app

--> set this dir to working dir (commands are applied from here)


COPY ./app /app

--> copy source code to image workdir


RUN adduser -D app_user

--> create user called app_user


USER app_user

--> change running user to newly created user

----> security purposes (without user image will be run by root account)
